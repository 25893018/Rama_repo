

ansible Installation & Configuration on AWS | Ansible basics | install & configure Ansible on EC2

Ansible Installation
===================

Ansible is an open source automation tool. It is very, simple to setup and yet powerful. Ansible can help you with 
configuration management, application deployment, task automation.

ansible is not requried to run any agent on client mechines - agent less 
ansible can connect remote hosts using sshkey gen   --> can use without any software  installtion
openrm for windows.
Ansible uses yaml files to write scripts
very flexible to  use
modules --system defined modules  --> if you dont want to use system defined modules you can also write custom modules
custom modules.
Ansible engine(AE) can run/manage your playbooks and easy to write playbooks   
ansible playbooks easily reable and easy to change.
AE will have (inventory,modules,Apis, plugins wil have ansble engine)
playbook can write using modules, conditions and then commands
=======

module is nothing but a library files or asking ansible to do/run using adhoc commands.

ansible cotroller (AE)--> linux( managed node) interperter will be python
for windows --> shell.

Ansibl is a agentless tool, we dont wnt to install clint progremmaes in managed nodes 
if we install on primary node, that should be ok.

where as other cheff or buffet ..need to install programme on client managed nodes aswell.


ansible have control nodes and managed nodes
master/control nodes is the primary node and inventory will be there in control node.
inventory/hosts file will have all ip addresses of client mechinesand as well FQDN(fully qualifid domain names)
managed nodes like a network nodes(linux, windows, stateful, storage, network ....) that we are implementiong tasks

ansible.cfg file can use for to manage user passwords/parameters or  you can give here your inventory locaion.

****using ssh we can coonect master to client node mechines

playbook can write using modules, conditions and then commands
Playbook is nothing simple text yaml file and  a sequence of plays
plays is not thing but a sequence of tasks
tasks is nothing but a plan of action. which is used to performed by modules.

Inventory is nothing but a list of remote/managed hosts. we have two types of inventory

static inventory /defulat invernoty are same  --> /etc/ansible/hosts -->default inventory file and this is a global file and can use all users.
this etc file we need root access to access this path/file in realtime,so we cannot use it in realtime.
also we cannot keep all project files in above path becz this is a global file and can use all users. , 
insted we can create inventory file in our project location. best way in production to use.

we can give in static/inventory file :- inventory/hosts file will have all ip addresses of client mechines
and as well FQDN(fully qualifid domain names)

same host we can use multiple groups in /etc/ansible/host file

example:
[linux server] server a,server b  (or) [linux server] server[a:d] --> a:d means range from a to d (a,b,c,d ..like) you can define like this as well
(or) 192.165.180.[1:00] --> it means i am using 100 ip servers
(or) 192.165.[250:252]:[1:100]  --> it means total 300 ip serers are using...you can define groups like this

[db server ]  --> server c 
[web] --> server a and server b

example command to check all web server ip's
===============
ansible --list-hosts web   --> it will fetch all web server list
ansible --list-hosts web 
ansible --list-hosts all   --> it will show all servers

how to create nested groups:
======
[India:childern]
db server
web
ansible --list-hosts India   --> it will show you dbserver ad web details  ( this is also one type of group)

suppose if you decelar just servere  separately without any under group, it will deiplay usig below command
servere --> in host file
ansible --list-hosts ungrouped

if we want to see all groups --> ansible-inventory --graph  ( this comandd is for default group)
if we want to see specific to your project in your project folder --> ansible-inventory --graph -i inventory

simple one project :  how to crete inventory file using in your project 
===========
my project name called citi, so i can create citiinventory file inyour project

PRoject details
hostame  purpose  location Env

TT1       web     hyd       dev
tt2      web      hyd       test
tt3      web      vizg      prod
tt4      web      blr       prod
Tt5      db       texas     Prod

cd citi
cd citiinventory
===================

[web server] web 
123.45.45.[a:c]
[db server ]  db
[Dev]
[test]
[prod]

[India:childer]
hyd
vizg
blr
[Us:childern]
texas

======================================
configuratio files in ansible
===================================
Ansible.cfg is a configuration file in ansible
there are two sections in config files --> one is default and second one is --> priviliage_escaltion

in priviliage_escaltion how to run commands for  managed hosts , we will specify here.

we can see three different paths we can see in ansible.cfg files

ansible --version

cd /etc/ansible/ansible.cfg
p-3( prioirity 3) in this ansible.cfg file you can see default inventory files./default location

p2--2nd one is specfic to user and when you created ~/.ansible.cfg file it will locate and show you when you run below comand

ansible --version

P1 --Third one is for your project in location --> go to your project path and create vi ansible.cfg file and then run below command
ansible --version

******* export ANSIBE_CONFIG = /tmp/ansible.cfg --> this path/command will override all above three priority config files.

ansible --version

ansible.cfg file for your locall project to use:
----------------
[defaults]
inventory = inventory
remote_user = ansible
host_key_checking = false
deprecation_warning = false

[privilege_escalation]
become = true
become_method = sudo
become_user = root
become_ask_pass = false

==========================================================================

help:
====
Ansible-doc -l  this comad will give you all ansible modules
ansible-doc -l | wc -l
ansible-doc -l | grep -i win_    

ansible-doc aws_s3
==================

Adhoc commands
==========
to create user : ansible all -m user -a "name=citibank"   when you run first time it will show you changed 
=============
and you need to run second time same command then it will show you success.

ansible all -m user -a "name=citibank state=absent"    --> remove user
ansible all -m command -a "id citibank" to check whether user is aviliable or ont
Ansible-doc all

Module:
========= 
have 4 types :- stable , priview --> going to change in next versins , deprecated ---it should not be used and remove( its retired)
shell commands (>> << > < = % ) these are arbitratory commands

ansible all -m ping

Essential regular modules or reqular to use:
===============
ansible all -m ping  --> it will heck python istalled or not

ansible all -m service

please note module can be run module can be run using RAW without python
ansible all -m ping 
ansible all -m command -a "/sbin/reboot -t now"   --to restart
ansible ansiblenode1 -m copy -a 'content="HI Subscribers" dest=/etc/motd'

here we are using two aru=gurments and copying data one server to another server usng adhoc commnd module

ansible is idompotent ..so it wont changes any other other arguments when you run command second time.

how to check data copied in remote server
======
ansible ansiblenode1 -m shell -a 'cat /etc/motd'

How to install python using  RAW in remote/managed nodes using adhoc command/without connecting remote server
===================
ansible -u root -i inventory ansiblnode2 --ask-pass -m raw -a 'yum install python3 -y'

Playbooks:
==================
Ansible playbooks are idompotenet
playboks start with --- lines and end with --- lines 

next always  start with - name  and then after argurments we want and then tasks 

Syntax fo playbook:
=====
----
- name
arguments
tasks
-name
module
arguments.....
tasks
-name
mdoule
arguments
tasks

...(three dots)

using playbooks , we can run multiple tasks where as using adhoc modules we run single or few tasks for testing to recommmand

how to write simple playbook: vi vsftpd.yml
============
---
- name: vsftpd
  hosts: ansiblenode1
  tasks:
- name: install vsftpd
  yum: name=vsftpd
- name: enable vsftpd
  service: name=vsftpd enabled=true
- name: create readme file
  copy: 
  content: "Hi subscribers"
  dest: /var/ftp/pub/README
  force: no
  mode: 0444
...

ansible-runbook vsftpd.yml

syntax cheking for yaml:
====================
ansible-playbook --syntax-check vsftpd.yaml    

-v --> show the tasks resutls
-vv --> results + configuration
-vvv --> it will show connections about managed hosts.
-vvvv --> it will show about plugins

ansible-playbook -v vsftpd.yaml  
ansible-playbook -vv vsftpd.yaml   .....

ansible-playbook -C vsftpd.yaml    --> will check whether working or not , but if there are any inter dependencies it willl not work -C

===========
Variables:
============
ansible support variables , that can be used to store values and those variables can be used throuhout programm ..that is called
dynamic variables.

inventory files are not used variables as those are deprecated and not used.

varaible syntax example:

- hosts: all
  vars:
  web_package: httpd


sample: user.yaml
---
- name: creating a user using sample
  hosts: all
  vars:
- user: rama
  tasks:
- name: create a user {{ user }}
  user:
    name: "{{user}}"

ansible-playbook -v user.yaml
how to check user on remote mechine using adhoc command:
==========================
ansible all -m shell -a "grep rama /etc/passwd"

==============================
variables can be used to host or group of hosts.
using arrays we can use loops and but in dictiories we cannot

mulit array or list sample:
==============
multiarry.yaml

- name: shows lits or known as arrays
  hosts: ansiblenode1
  vars_files:
  - vars/user_list
  tasks:
    - name: print array values
  debug:
    msg: "User has  {{item.username}} homedirectory {{ user.homedir}} and has shell {{ user.shell}}"
  loop: "{{users}}"
- name: print the second array value
    debug:
      msg: the second arry item is "{{users[1]}}"

vi vars/users_list.yaml
 users:
   - username: rama
     homedir: /home/rama
     shell: /bin/bash
   - username: chehan
     homedir: /home/chehan
     shell: /bin/bash
   - username: rohan
     homedir: /home/rohan
     shell: /bin/bash

=========================================================
how you manage secrets in ansible:
=====================================
- using valut we can manage secrets in ansible
- using ansible_valut we can manage access in secure way. it is used to encrypt and decrypt your files.

ansible-valut create valut.yaml   --> to create encrypted files
ansible-valut view  valut.yaml --> to view 
ansible-valut encrypt valut.yaml   -> to encrypt file
ansible-valut edit valut.yaml    --> to edit
ansible-valut decrypt valut.yaml 
ansible-valut rekey valut.yaml    --> to change the password for existing file

example:
ansible-vault create secretkey.yaml   ( when you enter , it will ask you password , you can give your own password for this file and remember
after enter password ,  it will go to vi mode to enter your username and password, and then enter details.like below and save it.
username: rama
pwhash: password

now if you check your file ;- cat secretkey.yaml ( it will show you in encrypted format)

 cat create-user.yaml file

---
- name: create a user
  hosts: all
  vars_files:
  - secretkey.yaml
  tasks:
    - name: creating user
      user:
      name: "{{ username }}"
      password: "{{pwhash }}"

now run the command: ansible-playbook --ask-vault-pass create-user.yaml    --here it will ask you password and you need to enter every time
================
if you dont want to enter password every time , follow below steps

echo ramapassword > key-vautlpass.yaml
cat key-vaultpass.yaml

you can change perimissions based on your requirment

ansible-playbook --vault-password-file=key-vaultpass create-user.yaml   --> use this command without asking password it will execute playbook

suppose now i want to change the password:
=========
ansible-vault rekey key-vaultpass.yaml





how to deploy ansible:
==========

1st after instllation ansible

create user always ..dont do it on root as this is not good practice

Prerequisites
An AWS EC2 instance  --> we  need one master node and two managed nodes on aws virtual mechines.

1. Installation steps: yum update -y 

2. Add a EPEL (Extra Packages for Enterprise Linux)third party repository to get packages for Ansible
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

3. Install Ansible :-yum install ansible -y 
4 . Check Ansible version:- ansible --version
==============
Configuration:
================
1. Create a new user/common user for ansible administration & grant admin access to user (Master and Slave) you need to create all nodes user

$ useradd ansadmin
$ passwd ansadmin

2. # below command addes ansadmin to sudoers file. But strongly recommended to use "visudo" command if you are aware vi or nano editor. 

visudo
ansadmin ALL=(ALL) NOPASSWORD: ALL

3. Using keybased authentication is advised. If you are still at learning stage use password based authentication (Master & Slave)
or
enable user login on all Ec2 instances:

cd /etc/ssh
ls -lrta

# sed command replaces "PasswordAuthentication no to yes" without editing file 
 
 $ sed -ie 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config

then restart the service using

$ service sshd restart   --> you need to do all systems
or
systemctl service ssdh

4. Login as a ansadmin user on master and generate ssh key (Master)

su - ansadmin
ssh-keygen   --just enter to create keys

cd .ssh --> to see your public and private key folders.

id_rsa.pub --> is the public key
id_rsa      --> is the private key


5.Copy keys onto all ansible client nodes (from Master to managed nodes)

ifconfig -a to get your system private ip.

ssh-copy-id <target-server ip>   get ip of client node and then you should do from master server

now you can login to target server  using
ssh targetserver ip --> it will show you after executed ssh-copy-id.

6. Update target servers information on /etc/ansible/hosts file (Master)

echo "<target server IP>" > /etc/ansible/hosts

or
sudo vi /etc/ansible/hosts
[all hosts]
ipaddress of targetserver

Run ansible command as ansadmin user it should be successful (Master)

ansible all -m ping

-m means module
if you want to install tree structre to see 
sudo yum install tree -y

in realtime different team members using ansible.cfg file, so you cannot use same all 5 members at a time
insted you can use inventory/ansible.cfg file  copy locally as well to use yourself.
================================
Steps how to use:

1 go to /etc/ansible and see sudo vi ansible.cfg file
when you open file you can see first inventory file

#inventory = /etc/ansible/hosts

inventory = /home/ansibleuser/inventory  ..i wil give/create inventory file locally like this from above line.

when you run below command now it will not work becz now your inventory file looking locally and you dont have ips in local inventory file

ansible all -m ping

now lets try creating above inventory file locally now using touch

touch /home/ansibleuser/inventory   ---still when you try pig command it will not work becz ip's are nt yet added to this inventory file.

vi /home/ansibleuser/inventory   --> add here ip addresses for client mechines
ansible all -m ping  -->now it should work locally as well.

now will copy ansibe.cfg file locally to use insted of touching main file

cp /etc/ansible/ansible.cfg /home/ansibleuser

vi ansible.cfg ..>  now open this file and try to remove local inventory file created an save file  and then 
check ping command whether ping working or not. also you can see here in this path

/home/ansibleuser --> you can see both inventory and ansible.cfg files

now again copy inventory = /home/ansibleuser/inventory into ansible.cfg file and then try it should work
and use inventory file locally. kindly note ansible.cfg file not modify in main path and not recommanded.















=======================
Ansible simple commands:
========================
rebooting: ansible all -a "/sbin/reboot"
copy file: ansible all -m copy -a "src=/home/dan dest=/tmp/home"
create user: ansible all -m user -a "name=testuser
password=encrypted password"
remove user: ansibleall -m user -a "name=testuser state=absent"
change file permission: ansible all -m file -a "des=/home/dan/file1.txt mode=777"
install package: ansibl -s all -m yum -a "name=httpd state=latest"
start a service: ansible -s all -m service -a "name=httpd state=started"
stop a service: ansible -s all -m service -a "name=httpd state=stopped"

-s is sudo or super user
-m is a module

================================================

*****Ansible installtion on AWS RHEL8 *************
===============================================

steps to follow:

https://github.com/ValaxyTech/DevOpsDemos/blob/master/Ansible/Ansible_installation_on_RHEL8.MD

1. Ansible Installation on RHEL 8.x server
Install Python latest version (on Control node and Managed host)

take two EC2 intances for control and host

yum install python3 -y

2. By default, python3 is the command to run python commands. to use just python, use "alternatives" command. (on Control node and Managed host)

alternatives --set python /usr/bin/python3
Check for Python version

python --version

3. Install python-pip package manager (on Control node)

yum -y install python3-pip

4. Create a new user for ansible administration & grant admin access to the user (on Control node and Managed host)

useradd ansadmin
passwd ansadmin
Below command adds ansadmin to sudoers file. But we strongly recommended using "visudo" command if you are aware vi or nano editor. (on Control node and Managed host)

echo "ansadmin ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
Using key-based authentication is advised. If you are still at the learning stage use password-based authentication (on Control node and Managed host)

# sed command replaces "PasswordAuthentication no to yes" without editing file 
 sed -ie 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
 sudo service sshd reload

5. Install Ansible as a ansadmin user (on Control node)
su - ansadmin
pip3 install ansible --user
Note: Ansible must be installed as a user (here ansadmin)

check for ansible version

ansible --version

6. in latest versions /etc/ansible folder not visible or created. so we need to create to add our hosts as a ansadmin

sudo mkdir /etc/ansible
cd /etc/ansible
sudo vi hosts


7. Log in as a ansadmin user on master and generate ssh key (on Control node)

ssh-keygen

8. Copy keys onto all ansible managed hosts (on Control node)

ssh-copy-id ansadmin@<target-server>

or 
ssh-copy-id localhost

Validation test
Create a directory /etc/ansible and create an inventory file called "hosts" add control node IP address in it.

Run ansible command as ansadmin user it should be successful (Master)

ansible all -m ping

=====================================================

*******Ansible Configuration file | What is 'ansible.cfg'? | How is it useful for me?
====================================================

ansible all -m command -a "uptime"

eventhough if you dont want to use/give any module by default it will execute as a command -a module defualt 
ansible will take and run -m  command 

ansible all -a "uptime"

we can also customize ansible.cfg file where you want to execute particular host mechines. for that you just need to update /etc/ansible/hosts.

suppose i have created host file and want to use 

vi hosts
give yoursystem ip

i dont want to take default host file

sudo vi /etc/ansible/ansible.cfg

uncomment and modify 
/home/ansadmin/hosts  ->>this is your own host file and not default.

now if you run command it will execute only on one server

ansible all -m command -a "uptime"

=======================================================
******Convert your shell commands as ansible playbook
Anisble playbook to install tomcat server:

=====================================================
setup tomcat server using shell commands
convertig shell commmands to an ansible playbook
using variables on ansible playbook
using notify and handelers on ansible playbook
how to manage different o/s's (lik RHEL , ubuntu) with a single playbook.
converting ansible playbook to ansible role

first step1: intall apache tomcat server using shell commands on tomcat server.

Step2: login to Ansible server with a user ansadmin

we can write step1 shell commands in playbook to execute using yml file or automation.

pwd
/home/ansadmin/playbooks

create one file calld tomcat-setup.yml
vi tomcat-setup.yml

---
- name: install tomcat server
  hosts: all
  become: true
  
  tasks:
  - name: install java
  yum:
     name: java
     state: latest
     
  - name: download tomcat server packages
   get_url:
     url: url of the tomcat server
     dest: /opt
     
   - name: extract packages
    unarchive:
     src: /opt
     dest: /opt
     remote_src: yes
     
   - name: start tomcat services
     shell: nohup /opt/tomcat/bin/startup.sh
     
     
     normally when you logoff from target system/server , service will stop normally, but when you use nohup command , eventhough if you logoff target servers, still service run on background.
  
 $  ip addr
  
 $    vi hosts
     [tomcat - server]
     ip of target server
     
$  ansible all -m ping -i hosts 
$ ansible-playbook -i hosts tomcat-setup.yml --check

$ ansible-playbook -i hosts tomcat-setup.yml
  
=====================================================

*******above yml file used lot of hardcode values , insted use hardcode values we can use  Ansible varible concept:

Ansible varibles: same above yml file we can use to update
ansible variables
=====================================================
ansible varible can defne different types 

1. define with the file directly
2. passing from external file
3. passing from hosts inventory
4. usng group_ars or hosts_vars ....

==========================
1. define with the file directly
============================

vi tomcat-setup.yml

---
- name: install tomcat server
  hosts: all
  become: true
  vars:
   - tomcat_url: copy tomcat install url
   - tomcatt_package: tomcat.tar.gz
  
  tasks:
  - name: install java
  yum:
     name: java
     state: latest
     
  - name: download tomcat server packages
   get_url:
     url: "{{ tomcat_url }}"  --> your variable starting of the line then should be use "" : in middle of the statement no need to use "" .
     
     dest: /opt
     
   - name: extract packages
    unarchive:
     src: /opt/{{ tomcatt_package }}.tar.gz
     dest: /opt
     remote_src: yes
     
   - name: start tomcat services
     shell: nohup /opt/{{ tomcatt_package }}/bin/startup.sh
  
 $  ip addr
  
 $    vi hosts
     [tomcat - server]
     ip of target server
     
$  ansible all -m ping -i hosts 
$ ansible-playbook -i hosts tomcat-setup.yml --check

$ ansible-playbook -i hosts tomcat-setup.yml


here vars is a varible command , you can declare all variables under vars and you can call where you want to pass those arguments.
 please note tomcat varibles starting of the line thne it should be use ""
 exmaple:"{{ tomcatt_package }}"
 
 otherwie in middle somewhere using of the line then no need to use ""
 
 example:
  /opt/{{ tomcatt_package }}
  
  ==============================================
 2. passing from external file
 =====================================
 
 create one file called tomcat_vars and add all varible configs:
 
 example:
    - tomcat_url: copy tomcat install url
   - tomcatt_package: tomcat.tar.gz
   
   when you execute yml file it calls variables from external file.
 
 and update tomcat-setup.yml file with tomcat_vars file.
 vi tomcat-setup.yml

---
- name: install tomcat server
  hosts: all
  become: true
  vars_files:
   - tomcat_vars
  
  tasks:
  - name: install java
  yum:
     name: java
     state: latest
     
  - name: download tomcat server packages
   get_url:
     url: "{{ tomcat_url }}"  --> your variable starting of the line then should be use "" : in middle of the statement no need to use "" .
     
     dest: /opt
     
   - name: extract packages
    unarchive:
     src: /opt/{{ tomcatt_package }}.tar.gz
     dest: /opt
     remote_src: yes
     
   - name: start tomcat services
     shell: nohup /opt/{{ tomcatt_package }}/bin/startup.sh
  
 $  ip addr
  
 $    vi hosts
     [tomcat - server]
     ip of target server
     
$  ansible all -m ping -i hosts 
$ ansible-playbook -i hosts tomcat-setup.yml --check

$ ansible-playbook -i hosts tomcat-setup.yml


here vars is a varible command , you can declare all variables under vars and you can call where you want to pass those arguments.
 please note tomcat varibles starting of the line thne it should be use ""
 exmaple:"{{ tomcatt_package }}"
 
 otherwie in middle somewhere using of the line then no need to use ""
 
 example:
  /opt/{{ tomcatt_package }}
=============================================================================

Ansible Dynamic Inventory on AWS *****************************
https://github.com/ValaxyTech/DevOpsDemos/blob/master/Ansible/Dynamic_Inventory.MD
==============================================================================

in this case when you are using aws auto scaling/load balancing  your instance may come up and go off some time.

at that time static inventory will not work , so we should go for dynamic inventory.

ec2.py is a python script which can communicate with the AWS and pull the resources information.

ec2.ini its helps us to pull the different resouces information ex: aws rds, ec2, rout53....;


Setup
To get help on dynamic inventory please follow Ansible Official Document

Download ec2.py and ec2.ini files

Create IAM Programmatic access user with EC2 full access on AWS console

IAM --> users --> Add user

Export IAM user credentials on Ansible server.

export AWS_ACCESS_KEY_ID='1bc123'
export AWS_SECRET_ACCESS_KEY='abc123'
To export keys permanently make sure that you have installed pip and boto and add credentials ~/.boto file

add executing permissions to ec2.py script

chmod 755 ec2.py
test the script

./ec2.py --list
List out servers which are running on ap-south-1a AZ

ansible -i ec2.py  ap-south-1a --list-hosts

======================================================
