

ansible Installation & Configuration on AWS | Ansible basics | install & configure Ansible on EC2

Ansible Installation
===================

Ansible is an open source automation platform. It is very, simple to setup and yet powerful. Ansible can help you with configuration management, application deployment, task automation.

Prerequisites
An AWS EC2 instance
1. Installation steps:

yum update -y 

2. Add a EPEL (Extra Packages for Enterprise Linux)third party repository to get packages for Ansible

rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

3. Install Ansible

yum install ansible -y 
Check Ansible version

ansible --version

==============
Configuration:
================
1. Create a new user/common user for ansible administration & grant admin access to user (Master and Slave)

$ useradd ansadmin
$ passwd ansadmin

2. # below command addes ansadmin to sudoers file. But strongly recommended to use "visudo" command if you are aware vi or nano editor. 

visudo
ansadmin ALL=(ALL) NOPASSWORD: ALL

3. Using keybased authentication is advised. If you are still at learning stage use password based authentication (Master & Slave)
or
enable user login on all Ec2 instances:

cd /etc/ssh
ls -lrta

# sed command replaces "PasswordAuthentication no to yes" without editing file 
 
 $ sed -ie 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config

then restart the service using

$ service sshd restart

4. Login as a ansadmin user on master and generate ssh key (Master)

su - ansadmin
ssh-keygen

cd .ssh --> to see your public and private key folders.

5.Copy keys onto all ansible client nodes (Master)

ifconfig -a to get your system private ip.

ssh-copy-id <target-server>

6. Update target servers information on /etc/ansible/hosts file (Master)

echo "<target server IP>" > /etc/ansible/hosts

or
sudo vi /etc/ansible/hosts
[all hosts]
ipaddress of targetserver

Run ansible command as ansadmin user it should be successful (Master)

ansible all -m ping

-m means module
=======================
Ansible simple commands:
========================
rebooting: ansible all -a "/sbin/reboot"
copy file: ansible all -m copy -a "src=/home/dan dest=/tmp/home"
create user: ansible all -m user -a "name=testuser
password=encrypted password"
remove user: ansibleall -m user -a "name=testuser state=absent"
change file permission: ansible all -m file -a "des=/home/dan/file1.txt mode=777"
install package: ansibl -s all -m yum -a "name=httpd state=latest"
start a service: ansible -s all -m service -a "name=httpd state=started"
stop a service: ansible -s all -m service -a "name=httpd state=stopped"

-s is sudo or super user
-m is a module

================================================

*****Ansible installtion on AWS RHEL8 *************
===============================================

steps to follow:

https://github.com/ValaxyTech/DevOpsDemos/blob/master/Ansible/Ansible_installation_on_RHEL8.MD

1. Ansible Installation on RHEL 8.x server
Install Python latest version (on Control node and Managed host)

take two EC2 intances for control and host

yum install python3 -y

2. By default, python3 is the command to run python commands. to use just python, use "alternatives" command. (on Control node and Managed host)

alternatives --set python /usr/bin/python3
Check for Python version

python --version

3. Install python-pip package manager (on Control node)

yum -y install python3-pip

4. Create a new user for ansible administration & grant admin access to the user (on Control node and Managed host)

useradd ansadmin
passwd ansadmin
Below command adds ansadmin to sudoers file. But we strongly recommended using "visudo" command if you are aware vi or nano editor. (on Control node and Managed host)

echo "ansadmin ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
Using key-based authentication is advised. If you are still at the learning stage use password-based authentication (on Control node and Managed host)

# sed command replaces "PasswordAuthentication no to yes" without editing file 
 sed -ie 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
 sudo service sshd reload

5. Install Ansible as a ansadmin user (on Control node)
su - ansadmin
pip3 install ansible --user
Note: Ansible must be installed as a user (here ansadmin)

check for ansible version

ansible --version

6. in latest versions /etc/ansible folder not visible or created. so we need to create to add our hosts as a ansadmin

sudo mkdir /etc/ansible
cd /etc/ansible
sudo vi hosts


7. Log in as a ansadmin user on master and generate ssh key (on Control node)

ssh-keygen

8. Copy keys onto all ansible managed hosts (on Control node)

ssh-copy-id ansadmin@<target-server>

or 
ssh-copy-id localhost

Validation test
Create a directory /etc/ansible and create an inventory file called "hosts" add control node IP address in it.

Run ansible command as ansadmin user it should be successful (Master)

ansible all -m ping

=====================================================

*******Ansible Configuration file | What is 'ansible.cfg'? | How is it useful for me?
====================================================

ansible all -m command -a "uptime"

eventhough if you dont want to use/give any module by default it will execute as a command -a module defualt 
ansible will take and run -m  command 

ansible all -a "uptime"

we can also customize ansible.cfg file where you want to execute particular host mechines. for that you just need to update /etc/ansible/hosts.

suppose i have created host file and want to use 

vi hosts
give yoursystem ip

i dont want to take default host file

sudo vi /etc/ansible/ansible.cfg

uncomment and modify 
/home/ansadmin/hosts  ->>this is your own host file and not default.

now if you run command it will execute only on one server

ansible all -m command -a "uptime"

=======================================================
******Convert your shell commands as ansible playbook
Anisble playbook to install tomcat server:

=====================================================
setup tomcat server using shell commands
convertig shell commmands to an ansible playbook
using variables on ansible playbook
using notify and handelers on ansible playbook
how to manage different o/s's (lik RHEL , ubuntu) with a single playbook.
converting ansible playbook to ansible role

first step1: intall apache tomcat server using shell commands on tomcat server.

Step2: login to Ansible server with a user ansadmin

we can write step1 shell commands in playbook to execute using yml file or automation.

pwd
/home/ansadmin/playbooks

create one file calld tomcat-setup.yml
vi tomcat-setup.yml

---
- name: install tomcat server
  hosts: all
  become: true
  
  tasks:
  - name: install java
  yum:
     name: java
     state: latest
     
  - name: download tomcat server packages
   get_url:
     url: url of the tomcat server
     dest: /opt
     
   - name: extract packages
    unarchive:
     src: /opt
     dest: /opt
     remote_src: yes
     
   - name: start tomcat services
     shell: nohup /opt/tomcat/bin/startup.sh
     
     
     normally when you logoff from target system/server , service will stop normally, but when you use nohup command , eventhough if you logoff target servers, still service run on background.
  
 $  ip addr
  
 $    vi hosts
     [tomcat - server]
     ip of target server
     
$  ansible all -m ping -i hosts 
$ ansible-playbook -i hosts tomcat-setup.yml --check

$ ansible-playbook -i hosts tomcat-setup.yml
  
=====================================================

*******above yml file used lot of hardcode values , insted use hardcode values we can use  Ansible varible concept:

Ansible varibles: same above yml file we can use to update
ansible variables
=====================================================
ansible varible can defne different types 

1. define with the file directly
2. passing from external file
3. passing from hosts inventory
4. usng group_ars or hosts_vars ....

==========================
1. define with the file directly
============================

vi tomcat-setup.yml

---
- name: install tomcat server
  hosts: all
  become: true
  vars:
   - tomcat_url: copy tomcat install url
   - tomcatt_package: tomcat.tar.gz
  
  tasks:
  - name: install java
  yum:
     name: java
     state: latest
     
  - name: download tomcat server packages
   get_url:
     url: "{{ tomcat_url }}"  --> your variable starting of the line then should be use "" : in middle of the statement no need to use "" .
     
     dest: /opt
     
   - name: extract packages
    unarchive:
     src: /opt/{{ tomcatt_package }}.tar.gz
     dest: /opt
     remote_src: yes
     
   - name: start tomcat services
     shell: nohup /opt/{{ tomcatt_package }}/bin/startup.sh
  
 $  ip addr
  
 $    vi hosts
     [tomcat - server]
     ip of target server
     
$  ansible all -m ping -i hosts 
$ ansible-playbook -i hosts tomcat-setup.yml --check

$ ansible-playbook -i hosts tomcat-setup.yml


here vars is a varible command , you can declare all variables under vars and you can call where you want to pass those arguments.
 please note tomcat varibles starting of the line thne it should be use ""
 exmaple:"{{ tomcatt_package }}"
 
 otherwie in middle somewhere using of the line then no need to use ""
 
 example:
  /opt/{{ tomcatt_package }}
  
  ==============================================
 2. passing from external file
 =====================================
 
 create one file called tomcat_vars and add all varible configs:
 
 example:
    - tomcat_url: copy tomcat install url
   - tomcatt_package: tomcat.tar.gz
   
   when you execute yml file it calls variables from external file.
 
 and update tomcat-setup.yml file with tomcat_vars file.
 vi tomcat-setup.yml

---
- name: install tomcat server
  hosts: all
  become: true
  vars_files:
   - tomcat_vars
  
  tasks:
  - name: install java
  yum:
     name: java
     state: latest
     
  - name: download tomcat server packages
   get_url:
     url: "{{ tomcat_url }}"  --> your variable starting of the line then should be use "" : in middle of the statement no need to use "" .
     
     dest: /opt
     
   - name: extract packages
    unarchive:
     src: /opt/{{ tomcatt_package }}.tar.gz
     dest: /opt
     remote_src: yes
     
   - name: start tomcat services
     shell: nohup /opt/{{ tomcatt_package }}/bin/startup.sh
  
 $  ip addr
  
 $    vi hosts
     [tomcat - server]
     ip of target server
     
$  ansible all -m ping -i hosts 
$ ansible-playbook -i hosts tomcat-setup.yml --check

$ ansible-playbook -i hosts tomcat-setup.yml


here vars is a varible command , you can declare all variables under vars and you can call where you want to pass those arguments.
 please note tomcat varibles starting of the line thne it should be use ""
 exmaple:"{{ tomcatt_package }}"
 
 otherwie in middle somewhere using of the line then no need to use ""
 
 example:
  /opt/{{ tomcatt_package }}
=============================================================================

Ansible Dynamic Inventory on AWS *****************************
https://github.com/ValaxyTech/DevOpsDemos/blob/master/Ansible/Dynamic_Inventory.MD
==============================================================================

in this case when you are using aws auto scaling/load balancing  your instance may come up and go off some time.

at that time static inventory will not work , so we should go for dynamic inventory.

ec2.py is a python script which can communicate with the AWS and pull the resources information.

ec2.ini its helps us to pull the different resouces information ex: aws rds, ec2, rout53....;


Setup
To get help on dynamic inventory please follow Ansible Official Document

Download ec2.py and ec2.ini files

Create IAM Programmatic access user with EC2 full access on AWS console

IAM --> users --> Add user

Export IAM user credentials on Ansible server.

export AWS_ACCESS_KEY_ID='1bc123'
export AWS_SECRET_ACCESS_KEY='abc123'
To export keys permanently make sure that you have installed pip and boto and add credentials ~/.boto file

add executing permissions to ec2.py script

chmod 755 ec2.py
test the script

./ec2.py --list
List out servers which are running on ap-south-1a AZ

ansible -i ec2.py  ap-south-1a --list-hosts

======================================================
